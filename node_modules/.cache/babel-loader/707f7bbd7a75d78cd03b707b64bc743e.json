{"ast":null,"code":"import _classCallCheck from\"/Users/learnacademy/Desktop/strikes-and-gutters/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/learnacademy/Desktop/strikes-and-gutters/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/learnacademy/Desktop/strikes-and-gutters/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/learnacademy/Desktop/strikes-and-gutters/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import'./App.css';import Square from'./components/Square';import abides from'./img/abides.jpeg';import the_jesus from'./img/the_jesus.jpeg';import zero from'./img/zero.jpeg';import pins from'./img/pins.jpeg';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(props){var _this;_classCallCheck(this,App);_this=_super.call(this,props);_this.setUpBoard=function(){var treasure=Math.floor(Math.random()*_this.state.board.length);var bomb;// Set the bomb location to a position that's not the treasure\ndo{bomb=Math.floor(Math.random()*_this.state.board.length);}while(treasure===bomb);//maps over array of squares with images\n_this.setState({board:[pins,pins,pins,pins,pins,pins,pins,pins,pins],treasureLocation:treasure,bombLocation:bomb,guesses:5,gameStatus:\"\",gameDone:false});};_this.handleGamePlay=function(index){var board=_this.state.board;var currentStatus=_this.state.gameStatus;var currentGuesses=_this.state.guesses;var endGame=false;// Return if the game is over\nif(_this.state.gameDone){return\"That rug really tied the room together\";}// Display a palm tree, treasure, or bomb at the square\n// Updates the game status\nif(index===_this.state.treasureLocation){board[index]=abides;currentStatus=\"The Dude Abides.\";endGame=true;}else if(index===_this.state.bombLocation){board[index]=zero;currentStatus=\"Mark it ZERO!\";endGame=true;}else{board[index]=the_jesus;currentStatus=\"\";--currentGuesses;// Check guesses and update status if no more guesses\nif(currentGuesses===0){currentStatus=\"That rug really tied the room together\";endGame=true;}}_this.setState({board:board,guesses:currentGuesses,gameStatus:currentStatus,gameDone:endGame});};_this.isGameDone=function(){if(_this.state.gameDone){return/*#__PURE__*/_jsx(\"h2\",{children:\"Shut the fuck up Donny.\"});}};_this.state={board:[\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\"],treasureLocation:null,bombLocation:null,guesses:5,gameStatus:null,gameDone:false,quotes:[\"There's a beverage here man.\",\"That's just like, your opinion man\",\"The dude abides\",\"I don't roll on Shabbos!\"]};return _this;}// React lifecycle method. Called when component is mounted\n_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){this.setUpBoard();}// Sets up the board. Called when component mounts or with play again button\n},{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{class:\"wrapper\",children:[/*#__PURE__*/_jsx(\"div\",{class:\"box1\",id:\"gameboard\",children:this.state.board.map(function(val,idx){return/*#__PURE__*/_jsx(Square,{img_url:val,value:val,index:idx,handleGamePlay:_this2.handleGamePlay},idx);})}),/*#__PURE__*/_jsxs(\"div\",{class:\"box2\",children:[/*#__PURE__*/_jsxs(\"div\",{class:\"scorebox\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"The Dude Abides\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:this.setUpBoard,children:\"Let's Roll\"}),/*#__PURE__*/_jsxs(\"h4\",{children:[\"Guesses Left: \",this.state.guesses]}),/*#__PURE__*/_jsx(\"h3\",{children:this.state.gameStatus})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"h1\",{children:this.state.quotes[this.state.guesses-1]})]})]})]})]});}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/strikes-and-gutters/src/App.js"],"names":["React","Component","Square","abides","the_jesus","zero","pins","App","props","setUpBoard","treasure","Math","floor","random","state","board","length","bomb","setState","treasureLocation","bombLocation","guesses","gameStatus","gameDone","handleGamePlay","index","currentStatus","currentGuesses","endGame","isGameDone","quotes","map","val","idx"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport Square from './components/Square'\nimport abides from './img/abides.jpeg'\nimport the_jesus from './img/the_jesus.jpeg'\nimport zero from './img/zero.jpeg'\nimport pins from './img/pins.jpeg'\n\nclass App extends Component{\n\n  constructor(props){\n    super(props)\n    this.state = {\n      board: [\"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\"],\n      treasureLocation: null,\n      bombLocation: null,\n      guesses: 5,\n      gameStatus: null,\n      gameDone: false,\n      quotes: [\"There's a beverage here man.\",          \n                \"That's just like, your opinion man\",\n                \"The dude abides\",\n                \"I don't roll on Shabbos!\"]\n    }\n  }\n\n  // React lifecycle method. Called when component is mounted\n  componentDidMount() {\n    this.setUpBoard()\n  }\n\n  // Sets up the board. Called when component mounts or with play again button\n  setUpBoard = () => {\n    let treasure = Math.floor(Math.random() * this.state.board.length)\n    let bomb;\n    \n    // Set the bomb location to a position that's not the treasure\n    do {\n      bomb = Math.floor(Math.random() * this.state.board.length)\n    } while (treasure === bomb);\n\n    //maps over array of squares with images\n    this.setState({\n      board: [ pins, pins, pins, pins, pins, pins, pins, pins, pins],\n      treasureLocation: treasure,\n      bombLocation: bomb,\n      guesses: 5,\n      gameStatus: \"\",\n      gameDone: false\n    })\n  }\n\n  // Handles gameplay and updates the board.\n  handleGamePlay = (index) => {\n    const {board} = this.state\n    let currentStatus = this.state.gameStatus\n    let currentGuesses = this.state.guesses\n    let endGame = false\n\n    // Return if the game is over\n    if (this.state.gameDone) {\n      return \"That rug really tied the room together\"\n    }\n\n    // Display a palm tree, treasure, or bomb at the square\n    // Updates the game status\n    if(index === this.state.treasureLocation) {\n      board[index] = abides\n      currentStatus = \"The Dude Abides.\"\n      endGame = true\n    } else if (index === this.state.bombLocation) {\n      board[index] = zero\n      currentStatus = \"Mark it ZERO!\"\n      endGame = true\n    } else {\n      board[index] = the_jesus\n      currentStatus = \"\"\n      --currentGuesses\n      // Check guesses and update status if no more guesses\n      if (currentGuesses === 0){\n        currentStatus = \"That rug really tied the room together\"\n        endGame = true\n      }\n    }\n    \n    this.setState({\n      board: board,\n      guesses: currentGuesses,\n      gameStatus: currentStatus,\n      gameDone: endGame\n    })\n  }\n\n  // Displays the play again button if game is done\n  isGameDone = () => {\n    if (this.state.gameDone) {\n      return (\n        <h2>Shut the fuck up Donny.</h2>\n      )\n    }\n  }\n\n  render(){\n    return(\n      <>\n      <br></br><br></br><br></br>\n      <div class=\"wrapper\">\n        <div class=\"box1\" id=\"gameboard\">\n          {this.state.board.map((val, idx) => {\n            return (\n              <Square\n                key={idx}\n                img_url={val}\n                value={val}\n                index={idx}\n                handleGamePlay={this.handleGamePlay}\n              />\n            )\n          })}\n          \n        </div>\n           <div class=\"box2\">\n             <div class=\"scorebox\">\n              <h1>The Dude Abides</h1>\n              <br></br>\n              <button type=\"button\" onClick={this.setUpBoard}>Let's Roll</button>\n              <h4>Guesses Left: {this.state.guesses}</h4>\n              <h3>{this.state.gameStatus}</h3>\n             </div>\n              <div>\n                <br></br>\n                <h1>{this.state.quotes[this.state.guesses-1]}</h1>\n              </div>\n            </div>\n      </div>\n    </>\n            )\n          }\n        }\n        \nexport default App\n"]},"metadata":{},"sourceType":"module"}