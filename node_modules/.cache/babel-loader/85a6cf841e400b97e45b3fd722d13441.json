{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/fail-strikes-and-gutters/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Square from './components/Square';\nimport abides from './img/abides.jpeg';\nimport the_jesus from './img/the_jesus.jpeg';\nimport zero from './img/zero.jpeg';\nimport pins from './img/pins.jpeg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setUpBoard = () => {\n      let treasure = Math.floor(Math.random() * this.state.board.length);\n      let bomb; // Set the bomb location to a position that's not the treasure\n\n      do {\n        bomb = Math.floor(Math.random() * this.state.board.length);\n      } while (treasure === bomb); //maps over array of squares with images\n\n\n      this.setState({\n        board: [pins, pins, pins, pins, pins, pins, pins, pins, pins],\n        treasureLocation: treasure,\n        bombLocation: bomb,\n        guesses: 5,\n        gameStatus: \"\",\n        gameDone: false\n      });\n    };\n\n    this.handleGamePlay = index => {\n      const {\n        board\n      } = this.state;\n      let currentStatus = this.state.gameStatus;\n      let currentGuesses = this.state.guesses;\n      let endGame = false; // Return if the game is over\n\n      if (this.state.gameDone) {\n        return \"That rug really tied the room together\";\n      } // Display a palm tree, treasure, or bomb at the square\n      // Updates the game status\n\n\n      if (index === this.state.treasureLocation) {\n        board[index] = abides;\n        currentStatus = \"The Dude Abides.\";\n        endGame = true;\n      } else if (index === this.state.bombLocation) {\n        board[index] = zero;\n        currentStatus = \"Mark it ZERO!\";\n        endGame = true;\n      } else {\n        board[index] = the_jesus;\n        currentStatus = \"\";\n        --currentGuesses; // Check guesses and update status if no more guesses\n\n        if (currentGuesses === 0) {\n          currentStatus = \"That rug really tied the room together\";\n          endGame = true;\n        }\n      }\n\n      this.setState({\n        board: board,\n        guesses: currentGuesses,\n        gameStatus: currentStatus,\n        gameDone: endGame\n      });\n    };\n\n    this.isGameDone = () => {\n      if (this.state.gameDone) {\n        return /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Shut the fuck up Donny.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }, this);\n      }\n    };\n\n    this.state = {\n      board: [\"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\"],\n      treasureLocation: null,\n      bombLocation: null,\n      guesses: 5,\n      gameStatus: null,\n      gameDone: false,\n      quotes: [\"There's a beverage here man.\", \"That's just like, your opinion man\", \"The dude abides\", \"I don't roll on Shabbos!\"]\n    };\n  } // React lifecycle method. Called when component is mounted\n\n\n  componentDidMount() {\n    this.setUpBoard();\n  } // Sets up the board. Called when component mounts or with play again button\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"box1\",\n          id: \"gameboard\",\n          children: this.state.board.map((val, idx) => {\n            return /*#__PURE__*/_jsxDEV(Square, {\n              img_url: val,\n              value: val,\n              index: idx,\n              handleGamePlay: this.handleGamePlay\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"box2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"scorebox\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"The Dude Abides\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: this.setUpBoard,\n              children: \"Let's Roll\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\"Guesses Left: \", this.state.guesses]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: this.state.gameStatus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: this.state.quotes[this.state.guesses - 1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/fail-strikes-and-gutters/src/App.js"],"names":["React","Component","Square","abides","the_jesus","zero","pins","App","constructor","props","setUpBoard","treasure","Math","floor","random","state","board","length","bomb","setState","treasureLocation","bombLocation","guesses","gameStatus","gameDone","handleGamePlay","index","currentStatus","currentGuesses","endGame","isGameDone","quotes","componentDidMount","render","map","val","idx"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport Square from './components/Square'\nimport abides from './img/abides.jpeg'\nimport the_jesus from './img/the_jesus.jpeg'\nimport zero from './img/zero.jpeg'\nimport pins from './img/pins.jpeg'\n\nclass App extends Component{\n\n  constructor(props){\n    super(props)\n    this.state = {\n      board: [\"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\"],\n      treasureLocation: null,\n      bombLocation: null,\n      guesses: 5,\n      gameStatus: null,\n      gameDone: false,\n      quotes: [\"There's a beverage here man.\",          \n                \"That's just like, your opinion man\",\n                \"The dude abides\",\n                \"I don't roll on Shabbos!\"]\n    }\n  }\n\n  // React lifecycle method. Called when component is mounted\n  componentDidMount() {\n    this.setUpBoard()\n  }\n\n  // Sets up the board. Called when component mounts or with play again button\n  setUpBoard = () => {\n    let treasure = Math.floor(Math.random() * this.state.board.length)\n    let bomb;\n    \n    // Set the bomb location to a position that's not the treasure\n    do {\n      bomb = Math.floor(Math.random() * this.state.board.length)\n    } while (treasure === bomb);\n\n    //maps over array of squares with images\n    this.setState({\n      board: [ pins, pins, pins, pins, pins, pins, pins, pins, pins],\n      treasureLocation: treasure,\n      bombLocation: bomb,\n      guesses: 5,\n      gameStatus: \"\",\n      gameDone: false\n    })\n  }\n\n  // Handles gameplay and updates the board.\n  handleGamePlay = (index) => {\n    const {board} = this.state\n    let currentStatus = this.state.gameStatus\n    let currentGuesses = this.state.guesses\n    let endGame = false\n\n    // Return if the game is over\n    if (this.state.gameDone) {\n      return \"That rug really tied the room together\"\n    }\n\n    // Display a palm tree, treasure, or bomb at the square\n    // Updates the game status\n    if(index === this.state.treasureLocation) {\n      board[index] = abides\n      currentStatus = \"The Dude Abides.\"\n      endGame = true\n    } else if (index === this.state.bombLocation) {\n      board[index] = zero\n      currentStatus = \"Mark it ZERO!\"\n      endGame = true\n    } else {\n      board[index] = the_jesus\n      currentStatus = \"\"\n      --currentGuesses\n      // Check guesses and update status if no more guesses\n      if (currentGuesses === 0){\n        currentStatus = \"That rug really tied the room together\"\n        endGame = true\n      }\n    }\n    \n    this.setState({\n      board: board,\n      guesses: currentGuesses,\n      gameStatus: currentStatus,\n      gameDone: endGame\n    })\n  }\n\n  // Displays the play again button if game is done\n  isGameDone = () => {\n    if (this.state.gameDone) {\n      return (\n        <h2>Shut the fuck up Donny.</h2>\n      )\n    }\n  }\n\n  render(){\n    return(\n      <>\n      <br></br><br></br><br></br>\n      <div class=\"wrapper\">\n        <div class=\"box1\" id=\"gameboard\">\n          {this.state.board.map((val, idx) => {\n            return (\n              <Square\n                key={idx}\n                img_url={val}\n                value={val}\n                index={idx}\n                handleGamePlay={this.handleGamePlay}\n              />\n            )\n          })}\n          \n        </div>\n           <div class=\"box2\">\n             <div class=\"scorebox\">\n              <h1>The Dude Abides</h1>\n              <br></br>\n              <button type=\"button\" onClick={this.setUpBoard}>Let's Roll</button>\n              <h4>Guesses Left: {this.state.guesses}</h4>\n              <h3>{this.state.gameStatus}</h3>\n             </div>\n              <div>\n                <br></br>\n                <h1>{this.state.quotes[this.state.guesses-1]}</h1>\n              </div>\n            </div>\n      </div>\n    </>\n            )\n          }\n        }\n        \nexport default App\n"]},"metadata":{},"sourceType":"module"}