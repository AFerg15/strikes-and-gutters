{"ast":null,"code":"import _classCallCheck from \"/Users/learnacademy/Desktop/treasure-hunt-refactor-AFerg15/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/learnacademy/Desktop/treasure-hunt-refactor-AFerg15/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/learnacademy/Desktop/treasure-hunt-refactor-AFerg15/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/learnacademy/Desktop/treasure-hunt-refactor-AFerg15/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/learnacademy/Desktop/treasure-hunt-refactor-AFerg15/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/learnacademy/Desktop/treasure-hunt-refactor-AFerg15/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Square from './components/Square';\nimport spongebob from './img/spongebob.jpeg';\nimport the_jesus from './img/the_jesus.jpeg';\nimport mr_krabs from './img/mr_krabs.png';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.setUpBoard = function () {\n      var treasure = Math.floor(Math.random() * _this.state.board.length);\n      var bomb; // Set the bomb location to a position that's not the treasure\n\n      do {\n        bomb = Math.floor(Math.random() * _this.state.board.length);\n      } while (treasure === bomb);\n\n      _this.setState({\n        board: [\"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\"],\n        treasureLocation: treasure,\n        bombLocation: bomb,\n        guesses: 5,\n        gameStatus: \"Guesses Left: 5\",\n        gameDone: false\n      });\n    };\n\n    _this.handleGamePlay = function (index) {\n      var board = _this.state.board;\n      var currentStatus = _this.state.gameStatus;\n      var currentGuesses = _this.state.guesses;\n      var endGame = false; // Return if the game is over\n\n      if (_this.state.gameDone) {\n        return;\n      } // Display a palm tree, treasure, or bomb at the square\n      // Updates the game status\n\n\n      if (index === _this.state.treasureLocation) {\n        board[index] = currentStatus = \"The Dude Abides.\";\n        endGame = true;\n      } else if (index === _this.state.bombLocation) {\n        board[index] = currentStatus = \"Mark it ZERO!\";\n        endGame = true;\n      } else {\n        board[index] = the_jesus;\n        currentGuesses--; // Check guesses and update status if no more guesses\n\n        if (currentGuesses > 0) {\n          currentStatus = \"Guesses Left: \" + currentGuesses;\n        } else {\n          currentStatus = \"That rug really tied the room together\";\n          endGame = true;\n        }\n      }\n\n      _this.setState({\n        board: board,\n        guesses: currentGuesses,\n        gameStatus: currentStatus,\n        gameDone: endGame\n      });\n    };\n\n    _this.isGameDone = function () {\n      if (_this.state.gameDone) {\n        return React.createElement(\"button\", {\n          type: \"button\",\n          onClick: _this.setUpBoard,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, \"Play Again\");\n      }\n    };\n\n    _this.state = {\n      board: [\"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\"],\n      treasureLocation: null,\n      bombLocation: null,\n      guesses: 5,\n      gameStatus: null,\n      gameDone: false,\n      quotes: [\"There's a beverage here man.\", \"That's just like, your opinion man\", \"The dude abides\", \"I don't roll on Shabbos!\"]\n    };\n    return _this;\n  } // React lifecycle method. Called when component is mounted\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setUpBoard();\n    } // Sets up the board. Called when component mounts or with play again button\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"The Dude Abides\"), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"\\\"The dude was the laziest man in all of Los Angeles County, which put him in the running for laziest worldwide.\\\"\"), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, this.state.gameStatus), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, !this.state.gameDone && this.state.guesses < 5 && this.state.quotes[this.state.guesses - 1]), this.isGameDone(), React.createElement(\"div\", {\n        id: \"gameboard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, this.state.board.map(function (val, idx) {\n        return React.createElement(Square, {\n          key: idx,\n          img_url: val,\n          value: val,\n          index: idx,\n          handleGamePlay: _this2.handleGamePlay,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/treasure-hunt-refactor-AFerg15/src/App.js"],"names":["React","Component","Square","spongebob","the_jesus","mr_krabs","App","props","setUpBoard","treasure","Math","floor","random","state","board","length","bomb","setState","treasureLocation","bombLocation","guesses","gameStatus","gameDone","handleGamePlay","index","currentStatus","currentGuesses","endGame","isGameDone","quotes","map","val","idx"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport Square from './components/Square'\nimport spongebob from './img/spongebob.jpeg'\nimport the_jesus from './img/the_jesus.jpeg'\nimport mr_krabs from './img/mr_krabs.png'\n\nclass App extends Component{\n\n  constructor(props){\n    super(props)\n    this.state = {\n      board: [\"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\"],\n      treasureLocation: null,\n      bombLocation: null,\n      guesses: 5,\n      gameStatus: null,\n      gameDone: false,\n      quotes: [\"There's a beverage here man.\",          \n                \"That's just like, your opinion man\",\n                \"The dude abides\",\n                \"I don't roll on Shabbos!\"]\n    }\n  }\n\n  // React lifecycle method. Called when component is mounted\n  componentDidMount() {\n    this.setUpBoard()\n  }\n\n  // Sets up the board. Called when component mounts or with play again button\n  setUpBoard = () => {\n    let treasure = Math.floor(Math.random() * this.state.board.length)\n    let bomb;\n    \n    // Set the bomb location to a position that's not the treasure\n    do {\n      bomb = Math.floor(Math.random() * this.state.board.length)\n    } while (treasure === bomb);\n\n    this.setState({\n      board: [\"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\"],\n      treasureLocation: treasure,\n      bombLocation: bomb,\n      guesses: 5,\n      gameStatus: \"Guesses Left: 5\",\n      gameDone: false\n    })\n  }\n\n  // Handles the game play and updates the board.\n  handleGamePlay = (index) => {\n    const {board} = this.state\n    let currentStatus = this.state.gameStatus\n    let currentGuesses = this.state.guesses\n    let endGame = false\n\n    // Return if the game is over\n    if (this.state.gameDone) {\n      return\n    }\n\n    // Display a palm tree, treasure, or bomb at the square\n    // Updates the game status\n    if(index === this.state.treasureLocation) {\n      board[index] = \n      currentStatus = \"The Dude Abides.\"\n      endGame = true\n    } else if (index === this.state.bombLocation) {\n      board[index] = \n      currentStatus = \"Mark it ZERO!\"\n      endGame = true\n    } else {\n      board[index] = the_jesus\n      currentGuesses--\n\n      // Check guesses and update status if no more guesses\n      if (currentGuesses > 0) {\n        currentStatus = \"Guesses Left: \" + currentGuesses\n      } else {\n        currentStatus = \"That rug really tied the room together\"\n        endGame = true\n      }\n    }\n    \n    this.setState({\n      board: board,\n      guesses: currentGuesses,\n      gameStatus: currentStatus,\n      gameDone: endGame\n    })\n  }\n\n  // Displays the play again button if game is done\n  isGameDone = () => {\n    if (this.state.gameDone) {\n      return (\n        <button type=\"button\" onClick={this.setUpBoard}>Play Again</button>\n      )\n    }\n  }\n\n  render(){\n    return(\n      <>\n        <h1>The Dude Abides</h1>\n        <h4>\"The dude was the laziest man in all of Los Angeles County, which put him in the running for laziest worldwide.\"</h4>\n        \n        <h4>{this.state.gameStatus}</h4>\n        <h4>{!this.state.gameDone && this.state.guesses < 5 && this.state.quotes[this.state.guesses-1]}</h4>\n        \n        {this.isGameDone()}\n\n        <div id=\"gameboard\">\n          {this.state.board.map((val, idx) => {\n            return (\n              <Square\n                key={idx}\n                img_url={val}\n                value={val}\n                index={idx}\n                handleGamePlay={this.handleGamePlay}\n              />\n            )\n          })}\n        </div>\n      </>\n    )\n  }\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}